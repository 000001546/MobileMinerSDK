#ifndef __KERNEL_H
#define __KERNEL_H

const char * kernel = "# 1 \"input.cl\"\n"
        "# 1 \"<built-in>\"\n"
        "# 1 \"<command-line>\"\n"
        "# 1 \"/usr/include/stdc-predef.h\" 1 3 4\n"
        "# 1 \"<command-line>\" 2\n"
        "# 1 \"input.cl\"\n"
        "# 1 \"param.h\" 1\n"
        "# 98 \"param.h\"\n"
        "typedef struct sols_s\n"
        "{\n"
        "    uint nr;\n"
        "    uint likely_invalids;\n"
        "    uchar valid[10];\n"
        "    uint values[10][(1 << 9)];\n"
        "} sols_t;\n"
        "# 2 \"input.cl\" 2\n"
        "\n"
        "#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable\n"
        "# 38 \"input.cl\"\n"
        "__constant ulong blake_iv[] =\n"
        "{\n"
        "    0x6a09e667f3bcc908, 0xbb67ae8584caa73b,\n"
        "    0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,\n"
        "    0x510e527fade682d1, 0x9b05688c2b3e6c1f,\n"
        "    0x1f83d9abfb41bd6b, 0x5be0cd19137e2179,\n"
        "};\n"
        "\n"
        "__kernel\n"
        "void selfTest(__global const float* A, __global const float* B, __global float* C)\n"
        "{\n"
        "    int id = get_global_id(0);\n"
        "    C[id] = A[id] * B[id];\n"
        "}\n"
        "\n"
        "__kernel\n"
        "void kernel_init_ht(__global char *ht, __global uint *rowCounters)\n"
        "{\n"
        "    rowCounters[get_global_id(0)] = 0;\n"
        "}\n"
        "# 81 \"input.cl\"\n"
        "uint ht_store(uint round, __global char *ht, uint i,\n"
        " ulong xi0, ulong xi1, ulong xi2, ulong xi3, __global uint *rowCounters)\n"
        "{\n"
        "    uint row;\n"
        "    __global char *p;\n"
        "    uint cnt;\n"
        "# 98 \"input.cl\"\n"
        "    if (!(round % 2))\n"
        " row = (xi0 & 0xffff) | ((xi0 & 0xc00000) >> 6);\n"
        "    else\n"
        " row = ((xi0 & 0xc0000) >> 2) |\n"
        "     ((xi0 & 0xf00) << 4) | ((xi0 & 0xf00000) >> 12) |\n"
        "     ((xi0 & 0xf) << 4) | ((xi0 & 0xf000) >> 12);\n"
        "# 121 \"input.cl\"\n"
        "    xi0 = (xi0 >> 16) | (xi1 << (64 - 16));\n"
        "    xi1 = (xi1 >> 16) | (xi2 << (64 - 16));\n"
        "    xi2 = (xi2 >> 16) | (xi3 << (64 - 16));\n"
        "    p = ht + row * ((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 32;\n"
        "    uint rowIdx = row/4;\n"
        "    uint rowOffset = 8*(row%4);\n"
        "    uint xcnt = atomic_add(rowCounters + rowIdx, 1 << rowOffset);\n"
        "    xcnt = (xcnt >> rowOffset) & 0xFF;\n"
        "    cnt = xcnt;\n"
        "    if (cnt >= ((1 << (((200 / (9 + 1)) + 1) - 18)) * 3))\n"
        "      {\n"
        "\n"
        " atomic_sub(rowCounters + rowIdx, 1 << rowOffset);\n"
        " return 1;\n"
        "      }\n"
        "    p += cnt * 32 + (8 + ((round) / 2) * 4);\n"
        "\n"
        "    *(__global uint *)(p - 4) = i;\n"
        "    if (round == 0 || round == 1)\n"
        "      {\n"
        "\n"
        " *(__global ulong *)(p + 0) = xi0;\n"
        " *(__global ulong *)(p + 8) = xi1;\n"
        " *(__global ulong *)(p + 16) = xi2;\n"
        "      }\n"
        "    else if (round == 2)\n"
        "      {\n"
        "\n"
        " *(__global uint *)(p + 0) = xi0;\n"
        " *(__global ulong *)(p + 4) = (xi0 >> 32) | (xi1 << 32);\n"
        " *(__global ulong *)(p + 12) = (xi1 >> 32) | (xi2 << 32);\n"
        "      }\n"
        "    else if (round == 3)\n"
        "      {\n"
        "\n"
        " *(__global uint *)(p + 0) = xi0;\n"
        " *(__global ulong *)(p + 4) = (xi0 >> 32) | (xi1 << 32);\n"
        " *(__global uint *)(p + 12) = (xi1 >> 32);\n"
        "      }\n"
        "    else if (round == 4)\n"
        "      {\n"
        "\n"
        " *(__global ulong *)(p + 0) = xi0;\n"
        " *(__global ulong *)(p + 8) = xi1;\n"
        "      }\n"
        "    else if (round == 5)\n"
        "      {\n"
        "\n"
        " *(__global ulong *)(p + 0) = xi0;\n"
        " *(__global uint *)(p + 8) = xi1;\n"
        "      }\n"
        "    else if (round == 6 || round == 7)\n"
        "      {\n"
        "\n"
        " *(__global uint *)(p + 0) = xi0;\n"
        " *(__global uint *)(p + 4) = (xi0 >> 32);\n"
        "      }\n"
        "    else if (round == 8)\n"
        "      {\n"
        "\n"
        " *(__global uint *)(p + 0) = xi0;\n"
        "      }\n"
        "    return 0;\n"
        "}\n"
        "# 204 \"input.cl\"\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1)))\n"
        "void kernel_round0(__global ulong *blake_state, __global char *ht,\n"
        " __global uint *rowCounters, __global uint *debug)\n"
        "{\n"
        "    uint tid = get_global_id(0);\n"
        "    ulong v[16];\n"
        "    uint inputs_per_thread = (1 << (200 / (9 + 1))) / get_global_size(0);\n"
        "    uint input = tid * inputs_per_thread;\n"
        "    uint input_end = (tid + 1) * inputs_per_thread;\n"
        "    uint dropped = 0;\n"
        "    while (input < input_end)\n"
        "      {\n"
        "\n"
        "\n"
        " ulong word1 = (ulong)input << 32;\n"
        "\n"
        " v[0] = blake_state[0];\n"
        " v[1] = blake_state[1];\n"
        " v[2] = blake_state[2];\n"
        " v[3] = blake_state[3];\n"
        " v[4] = blake_state[4];\n"
        " v[5] = blake_state[5];\n"
        " v[6] = blake_state[6];\n"
        " v[7] = blake_state[7];\n"
        " v[8] = blake_iv[0];\n"
        " v[9] = blake_iv[1];\n"
        " v[10] = blake_iv[2];\n"
        " v[11] = blake_iv[3];\n"
        " v[12] = blake_iv[4];\n"
        " v[13] = blake_iv[5];\n"
        " v[14] = blake_iv[6];\n"
        " v[15] = blake_iv[7];\n"
        "\n"
        " v[12] ^= 140 + 4 ;\n"
        "\n"
        " v[14] ^= (ulong)-1;\n"
        "\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + word1); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + word1); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + word1); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + word1); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + word1); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + word1); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + word1); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + word1); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + word1); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + word1); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + word1); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        " v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 32); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 24); v[0] = (v[0] + v[4] + 0); v[12] = rotate((v[12] ^ v[0]), (ulong)64 - 16); v[8] = (v[8] + v[12]); v[4] = rotate((v[4] ^ v[8]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 32); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 24); v[1] = (v[1] + v[5] + 0); v[13] = rotate((v[13] ^ v[1]), (ulong)64 - 16); v[9] = (v[9] + v[13]); v[5] = rotate((v[5] ^ v[9]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 32); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 24); v[2] = (v[2] + v[6] + 0); v[14] = rotate((v[14] ^ v[2]), (ulong)64 - 16); v[10] = (v[10] + v[14]); v[6] = rotate((v[6] ^ v[10]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 32); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 24); v[3] = (v[3] + v[7] + 0); v[15] = rotate((v[15] ^ v[3]), (ulong)64 - 16); v[11] = (v[11] + v[15]); v[7] = rotate((v[7] ^ v[11]), (ulong)64 - 63);;\n"
        " v[0] = (v[0] + v[5] + word1); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 32); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 24); v[0] = (v[0] + v[5] + 0); v[15] = rotate((v[15] ^ v[0]), (ulong)64 - 16); v[10] = (v[10] + v[15]); v[5] = rotate((v[5] ^ v[10]), (ulong)64 - 63);;\n"
        " v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 32); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 24); v[1] = (v[1] + v[6] + 0); v[12] = rotate((v[12] ^ v[1]), (ulong)64 - 16); v[11] = (v[11] + v[12]); v[6] = rotate((v[6] ^ v[11]), (ulong)64 - 63);;\n"
        " v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 32); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 24); v[2] = (v[2] + v[7] + 0); v[13] = rotate((v[13] ^ v[2]), (ulong)64 - 16); v[8] = (v[8] + v[13]); v[7] = rotate((v[7] ^ v[8]), (ulong)64 - 63);;\n"
        " v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 32); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 24); v[3] = (v[3] + v[4] + 0); v[14] = rotate((v[14] ^ v[3]), (ulong)64 - 16); v[9] = (v[9] + v[14]); v[4] = rotate((v[4] ^ v[9]), (ulong)64 - 63);;\n"
        "\n"
        "\n"
        "\n"
        " ulong h[7];\n"
        " h[0] = blake_state[0] ^ v[0] ^ v[8];\n"
        " h[1] = blake_state[1] ^ v[1] ^ v[9];\n"
        " h[2] = blake_state[2] ^ v[2] ^ v[10];\n"
        " h[3] = blake_state[3] ^ v[3] ^ v[11];\n"
        " h[4] = blake_state[4] ^ v[4] ^ v[12];\n"
        " h[5] = blake_state[5] ^ v[5] ^ v[13];\n"
        " h[6] = (blake_state[6] ^ v[6] ^ v[14]) & 0xffff;\n"
        "\n"
        "\n"
        "\n"
        " dropped += ht_store(0, ht, input * 2,\n"
        "  h[0],\n"
        "  h[1],\n"
        "  h[2],\n"
        "  h[3], rowCounters);\n"
        " dropped += ht_store(0, ht, input * 2 + 1,\n"
        "  (h[3] >> 8) | (h[4] << (64 - 8)),\n"
        "  (h[4] >> 8) | (h[5] << (64 - 8)),\n"
        "  (h[5] >> 8) | (h[6] << (64 - 8)),\n"
        "  (h[6] >> 8), rowCounters);\n"
        "\n"
        "\n"
        "\n"
        "\n"
        " input++;\n"
        "      }\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "}\n"
        "# 424 \"input.cl\"\n"
        "ulong half_aligned_long(__global ulong *p, uint offset)\n"
        "{\n"
        "    return\n"
        " (((ulong)*(__global uint *)((__global char *)p + offset + 0)) << 0) |\n"
        " (((ulong)*(__global uint *)((__global char *)p + offset + 4)) << 32);\n"
        "}\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "uint well_aligned_int(__global ulong *_p, uint offset)\n"
        "{\n"
        "    __global char *p = (__global char *)_p;\n"
        "    return *(__global uint *)(p + offset);\n"
        "}\n"
        "# 450 \"input.cl\"\n"
        "uint xor_and_store(uint round, __global char *ht_dst, uint row,\n"
        " uint slot_a, uint slot_b, __global ulong *a, __global ulong *b,\n"
        " __global uint *rowCounters)\n"
        "{\n"
        "    ulong xi0, xi1, xi2;\n"
        "\n"
        "\n"
        "\n"
        "    if (round == 1 || round == 2)\n"
        "      {\n"
        "\n"
        " xi0 = *(a++) ^ *(b++);\n"
        " xi1 = *(a++) ^ *(b++);\n"
        " xi2 = *a ^ *b;\n"
        " if (round == 2)\n"
        "   {\n"
        "\n"
        "     xi0 = (xi0 >> 8) | (xi1 << (64 - 8));\n"
        "     xi1 = (xi1 >> 8) | (xi2 << (64 - 8));\n"
        "     xi2 = (xi2 >> 8);\n"
        "   }\n"
        "      }\n"
        "    else if (round == 3)\n"
        "      {\n"
        "\n"
        " xi0 = half_aligned_long(a, 0) ^ half_aligned_long(b, 0);\n"
        " xi1 = half_aligned_long(a, 8) ^ half_aligned_long(b, 8);\n"
        " xi2 = well_aligned_int(a, 16) ^ well_aligned_int(b, 16);\n"
        "      }\n"
        "    else if (round == 4 || round == 5)\n"
        "      {\n"
        "\n"
        " xi0 = half_aligned_long(a, 0) ^ half_aligned_long(b, 0);\n"
        " xi1 = half_aligned_long(a, 8) ^ half_aligned_long(b, 8);\n"
        " xi2 = 0;\n"
        " if (round == 4)\n"
        "   {\n"
        "\n"
        "     xi0 = (xi0 >> 8) | (xi1 << (64 - 8));\n"
        "     xi1 = (xi1 >> 8);\n"
        "   }\n"
        "      }\n"
        "    else if (round == 6)\n"
        "      {\n"
        "\n"
        " xi0 = *a++ ^ *b++;\n"
        " xi1 = *(__global uint *)a ^ *(__global uint *)b;\n"
        " xi2 = 0;\n"
        " if (round == 6)\n"
        "   {\n"
        "\n"
        "     xi0 = (xi0 >> 8) | (xi1 << (64 - 8));\n"
        "     xi1 = (xi1 >> 8);\n"
        "   }\n"
        "      }\n"
        "    else if (round == 7 || round == 8)\n"
        "      {\n"
        "\n"
        " xi0 = half_aligned_long(a, 0) ^ half_aligned_long(b, 0);\n"
        " xi1 = 0;\n"
        " xi2 = 0;\n"
        " if (round == 8)\n"
        "   {\n"
        "\n"
        "     xi0 = (xi0 >> 8);\n"
        "   }\n"
        "      }\n"
        "\n"
        "\n"
        "    if (!xi0 && !xi1)\n"
        " return 0;\n"
        "\n"
        "\n"
        "\n"
        "    return ht_store(round, ht_dst, ((row << 14) | ((slot_b & 0x7f) << 7) | (slot_a & 0x7f)),\n"
        "     xi0, xi1, xi2, 0, rowCounters);\n"
        "}\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "void equihash_round(uint round,\n"
        " __global char *ht_src,\n"
        " __global char *ht_dst,\n"
        " __global uint *debug,\n"
        " __local uchar *first_words_data,\n"
        " __local uint *collisionsData,\n"
        " __local uint *collisionsNum,\n"
        " __global uint *rowCountersSrc,\n"
        " __global uint *rowCountersDst)\n"
        "{\n"
        "    uint tid = get_global_id(0);\n"
        "    uint tlid = get_local_id(0);\n"
        "    __global char *p;\n"
        "    uint cnt;\n"
        "    __local uchar *first_words = &first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*tlid];\n"
        "    uchar mask;\n"
        "    uint i, j;\n"
        "\n"
        "\n"
        "    uint n;\n"
        "    uint dropped_coll = 0;\n"
        "    uint dropped_stor = 0;\n"
        "    __global ulong *a, *b;\n"
        "    uint xi_offset;\n"
        "\n"
        "    xi_offset = (8 + ((round - 1) / 2) * 4);\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "    mask = ((!(round % 2)) ? 0x03 : 0x30);\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "    uint thCollNum = 0;\n"
        "    *collisionsNum = 0;\n"
        "    barrier(CLK_LOCAL_MEM_FENCE);\n"
        "    p = (ht_src + tid * ((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 32);\n"
        "    uint rowIdx = tid/4;\n"
        "    uint rowOffset = 8*(tid%4);\n"
        "    cnt = (rowCountersSrc[rowIdx] >> rowOffset) & 0xFF;\n"
        "    cnt = min(cnt, (uint)((1 << (((200 / (9 + 1)) + 1) - 18)) * 3));\n"
        "    if (!cnt)\n"
        "\n"
        " goto part2;\n"
        "    p += xi_offset;\n"
        "    for (i = 0; i < cnt; i++, p += 32)\n"
        " first_words[i] = (*(__global uchar *)p) & mask;\n"
        "\n"
        "    for (i = 0; i < cnt-1 && thCollNum < (((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5); i++)\n"
        "      {\n"
        " uchar data_i = first_words[i];\n"
        " uint collision = (tid << 10) | (i << 5) | (i + 1);\n"
        " for (j = i+1; (j+4) < cnt;)\n"
        "   {\n"
        "       {\n"
        "  uint isColl = ((data_i == first_words[j]) ? 1 : 0);\n"
        "  if (isColl)\n"
        "    {\n"
        "      thCollNum++;\n"
        "      uint index = atomic_inc(collisionsNum);\n"
        "      collisionsData[index] = collision;\n"
        "    }\n"
        "  collision++;\n"
        "  j++;\n"
        "       }\n"
        "       {\n"
        "  uint isColl = ((data_i == first_words[j]) ? 1 : 0);\n"
        "  if (isColl)\n"
        "    {\n"
        "      thCollNum++;\n"
        "      uint index = atomic_inc(collisionsNum);\n"
        "      collisionsData[index] = collision;\n"
        "    }\n"
        "  collision++;\n"
        "  j++;\n"
        "       }\n"
        "       {\n"
        "  uint isColl = ((data_i == first_words[j]) ? 1 : 0);\n"
        "  if (isColl)\n"
        "    {\n"
        "      thCollNum++;\n"
        "      uint index = atomic_inc(collisionsNum);\n"
        "      collisionsData[index] = collision;\n"
        "    }\n"
        "  collision++;\n"
        "  j++;\n"
        "       }\n"
        "       {\n"
        "  uint isColl = ((data_i == first_words[j]) ? 1 : 0);\n"
        "  if (isColl)\n"
        "    {\n"
        "      thCollNum++;\n"
        "      uint index = atomic_inc(collisionsNum);\n"
        "      collisionsData[index] = collision;\n"
        "    }\n"
        "  collision++;\n"
        "  j++;\n"
        "       }\n"
        "   }\n"
        " for (; j < cnt; j++)\n"
        "   {\n"
        "     uint isColl = ((data_i == first_words[j]) ? 1 : 0);\n"
        "     if (isColl)\n"
        "       {\n"
        "  thCollNum++;\n"
        "  uint index = atomic_inc(collisionsNum);\n"
        "  collisionsData[index] = collision;\n"
        "       }\n"
        "     collision++;\n"
        "   }\n"
        "      }\n"
        "\n"
        "part2:\n"
        "    barrier(CLK_LOCAL_MEM_FENCE);\n"
        "    uint totalCollisions = *collisionsNum;\n"
        "    for (uint index = tlid; index < totalCollisions; index += get_local_size(0))\n"
        "      {\n"
        " uint collision = collisionsData[index];\n"
        " uint collisionThreadId = collision >> 10;\n"
        " uint i = (collision >> 5) & 0x1F;\n"
        " uint j = collision & 0x1F;\n"
        " __global uchar *ptr = ht_src + collisionThreadId * ((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 32 +\n"
        "     xi_offset;\n"
        " a = (__global ulong *)(ptr + i * 32);\n"
        " b = (__global ulong *)(ptr + j * 32);\n"
        " dropped_stor += xor_and_store(round, ht_dst, collisionThreadId, i, j,\n"
        "  a, b, rowCountersDst);\n"
        "      }\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "}\n"
        "# 686 \"input.cl\"\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round1(__global char *ht_src, __global char *ht_dst, __global uint *rowCountersSrc, __global uint *rowCountersDst, __global uint *debug) { __local uchar first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*64]; __local uint collisionsData[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5) * 64]; __local uint collisionsNum; equihash_round(1, ht_src, ht_dst, debug, first_words_data, collisionsData, &collisionsNum, rowCountersSrc, rowCountersDst); }\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round2(__global char *ht_src, __global char *ht_dst, __global uint *rowCountersSrc, __global uint *rowCountersDst, __global uint *debug) { __local uchar first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*64]; __local uint collisionsData[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5) * 64]; __local uint collisionsNum; equihash_round(2, ht_src, ht_dst, debug, first_words_data, collisionsData, &collisionsNum, rowCountersSrc, rowCountersDst); }\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round3(__global char *ht_src, __global char *ht_dst, __global uint *rowCountersSrc, __global uint *rowCountersDst, __global uint *debug) { __local uchar first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*64]; __local uint collisionsData[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5) * 64]; __local uint collisionsNum; equihash_round(3, ht_src, ht_dst, debug, first_words_data, collisionsData, &collisionsNum, rowCountersSrc, rowCountersDst); }\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round4(__global char *ht_src, __global char *ht_dst, __global uint *rowCountersSrc, __global uint *rowCountersDst, __global uint *debug) { __local uchar first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*64]; __local uint collisionsData[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5) * 64]; __local uint collisionsNum; equihash_round(4, ht_src, ht_dst, debug, first_words_data, collisionsData, &collisionsNum, rowCountersSrc, rowCountersDst); }\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round5(__global char *ht_src, __global char *ht_dst, __global uint *rowCountersSrc, __global uint *rowCountersDst, __global uint *debug) { __local uchar first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*64]; __local uint collisionsData[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5) * 64]; __local uint collisionsNum; equihash_round(5, ht_src, ht_dst, debug, first_words_data, collisionsData, &collisionsNum, rowCountersSrc, rowCountersDst); }\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round6(__global char *ht_src, __global char *ht_dst, __global uint *rowCountersSrc, __global uint *rowCountersDst, __global uint *debug) { __local uchar first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*64]; __local uint collisionsData[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5) * 64]; __local uint collisionsNum; equihash_round(6, ht_src, ht_dst, debug, first_words_data, collisionsData, &collisionsNum, rowCountersSrc, rowCountersDst); }\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round7(__global char *ht_src, __global char *ht_dst, __global uint *rowCountersSrc, __global uint *rowCountersDst, __global uint *debug) { __local uchar first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*64]; __local uint collisionsData[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5) * 64]; __local uint collisionsNum; equihash_round(7, ht_src, ht_dst, debug, first_words_data, collisionsData, &collisionsNum, rowCountersSrc, rowCountersDst); }\n"
        "\n"
        "\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1)))\n"
        "void kernel_round8(__global char *ht_src, __global char *ht_dst,\n"
        " __global uint *rowCountersSrc, __global uint *rowCountersDst,\n"
        " __global uint *debug, __global sols_t *sols)\n"
        "{\n"
        "    uint tid = get_global_id(0);\n"
        "    __local uchar first_words_data[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3)+2)*64];\n"
        "    __local uint collisionsData[(((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 5) * 64];\n"
        "    __local uint collisionsNum;\n"
        "    equihash_round(8, ht_src, ht_dst, debug, first_words_data, collisionsData,\n"
        "     &collisionsNum, rowCountersSrc, rowCountersDst);\n"
        "    if (!tid)\n"
        " sols->nr = sols->likely_invalids = 0;\n"
        "}\n"
        "\n"
        "uint expand_ref(__global char *ht, uint xi_offset, uint row, uint slot)\n"
        "{\n"
        "    return *(__global uint *)(ht + row * ((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 32 +\n"
        "     slot * 32 + xi_offset - 4);\n"
        "}\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "uint expand_refs(uint *ins, uint nr_inputs, __global char **htabs,\n"
        " uint round)\n"
        "{\n"
        "    __global char *ht = htabs[round % 2];\n"
        "    uint i = nr_inputs - 1;\n"
        "    uint j = nr_inputs * 2 - 1;\n"
        "    uint xi_offset = (8 + ((round) / 2) * 4);\n"
        "    int dup_to_watch = -1;\n"
        "    do\n"
        "      {\n"
        " ins[j] = expand_ref(ht, xi_offset,\n"
        "  (ins[i] >> 14), ((ins[i] >> 7) & 0x7f));\n"
        " ins[j - 1] = expand_ref(ht, xi_offset,\n"
        "  (ins[i] >> 14), (ins[i] & 0x7f));\n"
        " if (!round)\n"
        "   {\n"
        "     if (dup_to_watch == -1)\n"
        "  dup_to_watch = ins[j];\n"
        "     else if (ins[j] == dup_to_watch || ins[j - 1] == dup_to_watch)\n"
        "  return 0;\n"
        "   }\n"
        " if (!i)\n"
        "     break ;\n"
        " i--;\n"
        " j -= 2;\n"
        "      }\n"
        "    while (1);\n"
        "    return 1;\n"
        "}\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "void potential_sol(__global char **htabs, __global sols_t *sols,\n"
        " uint ref0, uint ref1)\n"
        "{\n"
        "    uint nr_values;\n"
        "    uint values_tmp[(1 << 9)];\n"
        "    uint sol_i;\n"
        "    uint i;\n"
        "    nr_values = 0;\n"
        "    values_tmp[nr_values++] = ref0;\n"
        "    values_tmp[nr_values++] = ref1;\n"
        "    uint round = 9 - 1;\n"
        "    do\n"
        "      {\n"
        " round--;\n"
        " if (!expand_refs(values_tmp, nr_values, htabs, round))\n"
        "     return ;\n"
        " nr_values *= 2;\n"
        "      }\n"
        "    while (round > 0);\n"
        "\n"
        "    sol_i = atomic_inc(&sols->nr);\n"
        "    if (sol_i >= 10)\n"
        " return ;\n"
        "    for (i = 0; i < (1 << 9); i++)\n"
        " sols->values[sol_i][i] = values_tmp[i];\n"
        "    sols->valid[sol_i] = 1;\n"
        "}\n"
        "\n"
        "\n"
        "\n"
        "\n"
        "__kernel __attribute__((reqd_work_group_size(64, 1, 1)))\n"
        "void kernel_sols(__global char *ht0, __global char *ht1, __global sols_t *sols,\n"
        " __global uint *rowCountersSrc, __global uint *rowCountersDst)\n"
        "{\n"
        "    uint tid = get_global_id(0);\n"
        "    __global char *htabs[2] = { ht0, ht1 };\n"
        "    uint ht_i = (9 - 1) % 2;\n"
        "    uint cnt;\n"
        "    uint xi_offset = (8 + ((9 - 1) / 2) * 4);\n"
        "    uint i, j;\n"
        "    __global char *a, *b;\n"
        "    uint ref_i, ref_j;\n"
        "\n"
        "\n"
        "    ulong collisions;\n"
        "    uint coll;\n"
        "\n"
        "\n"
        "\n"
        "    uint mask = 0xffffff;\n"
        "\n"
        "\n"
        "\n"
        "    a = htabs[ht_i] + tid * ((1 << (((200 / (9 + 1)) + 1) - 18)) * 3) * 32;\n"
        "    uint rowIdx = tid/4;\n"
        "    uint rowOffset = 8*(tid%4);\n"
        "    cnt = (rowCountersSrc[rowIdx] >> rowOffset) & 0xFF;\n"
        "    cnt = min(cnt, (uint)((1 << (((200 / (9 + 1)) + 1) - 18)) * 3));\n"
        "    coll = 0;\n"
        "    a += xi_offset;\n"
        "    for (i = 0; i < cnt; i++, a += 32)\n"
        "      {\n"
        " uint a_data = ((*(__global uint *)a) & mask);\n"
        " ref_i = *(__global uint *)(a - 4);\n"
        " for (j = i + 1, b = a + 32; j < cnt; j++, b += 32)\n"
        "   {\n"
        "     if (a_data == ((*(__global uint *)b) & mask))\n"
        "       {\n"
        "  ref_j = *(__global uint *)(b - 4);\n"
        "  collisions = ((ulong)ref_i << 32) | ref_j;\n"
        "  goto exit1;\n"
        "       }\n"
        "   }\n"
        "      }\n"
        "    return;\n"
        "\n"
        "exit1:\n"
        "    potential_sol(htabs, sols, collisions >> 32, collisions & 0xffffffff);\n"
        "}";

#endif