apply plugin: 'com.android.library'

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

def sdkAarName = 'WaterholeZcashMiner_1.0'
def sourceAar = 'WaterholeZcashMiner-release'

// 生成aar
task makeAar(type: Copy, dependsOn: build) {
    from(project.buildDir.toString() + '/outputs/aar', project.buildDir.toString() + '/outputs/mapping/release')
    into(rootProject.rootDir.toString() + '/releaseaar')
    include(sourceAar + '.aar', 'mapping.txt')
    rename(sourceAar, sdkAarName)
    rename('mapping', sdkAarName + "-mapping")
}

// FindBugs 是一个静态分析工具，它检查类或者 JAR 文件，将字节码与一组缺陷模式进行对比以发现可能的问题
apply plugin: 'findbugs'
task customFindbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    classes = files("$project.buildDir/intermediates/classes")
    source = fileTree('src/main/java/waterhole/miner/zcash')
    classpath = files()
    reports {
        xml.enabled = true
        xml.withMessages = true
        html.enabled = !xml.isEnabled()
        xml.destination "$project.rootDir.absolutePath/reports/findbugs_WaterholeZcashMiner.xml"
        html.destination "$project.rootDir.absolutePath/reports/findbugs_WaterholeZcashMiner.html"
    }
}

artifacts {
    archives file: file("${projectDir}/build/outputs/mapping/release/mapping.txt"), classifier: 'mapping', type: 'txt'
}
